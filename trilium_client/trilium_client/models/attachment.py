# coding: utf-8

"""
    ETAPI

    External Trilium API

    The version of the OpenAPI document: 1.0.0
    Contact: zadam.apps@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Attachment(BaseModel):
    """
    Attachment is owned by a note, has title and content
    """ # noqa: E501
    attachment_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="attachmentId")
    owner_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="ownerId")
    role: Optional[StrictStr] = None
    mime: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    position: Optional[StrictInt] = None
    blob_id: Optional[StrictStr] = Field(default=None, description="ID of the blob object which effectively serves as a content hash", alias="blobId")
    date_modified: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="dateModified")
    utc_date_modified: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="utcDateModified")
    utc_date_scheduled_for_erasure_since: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="utcDateScheduledForErasureSince")
    content_length: Optional[StrictInt] = Field(default=None, alias="contentLength")
    __properties: ClassVar[List[str]] = ["attachmentId", "ownerId", "role", "mime", "title", "position", "blobId", "dateModified", "utcDateModified", "utcDateScheduledForErasureSince", "contentLength"]

    @field_validator('attachment_id')
    def attachment_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z0-9_]{4,32}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z0-9_]{4,32}/")
        return value

    @field_validator('owner_id')
    def owner_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[a-zA-Z0-9_]{4,32}", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z0-9_]{4,32}/")
        return value

    @field_validator('date_modified')
    def date_modified_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}[\+\-][0-9]{4}", value):
            raise ValueError(r"must validate the regular expression /[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}[\+\-][0-9]{4}/")
        return value

    @field_validator('utc_date_modified')
    def utc_date_modified_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z", value):
            raise ValueError(r"must validate the regular expression /[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z/")
        return value

    @field_validator('utc_date_scheduled_for_erasure_since')
    def utc_date_scheduled_for_erasure_since_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z", value):
            raise ValueError(r"must validate the regular expression /[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{3}Z/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachmentId": obj.get("attachmentId"),
            "ownerId": obj.get("ownerId"),
            "role": obj.get("role"),
            "mime": obj.get("mime"),
            "title": obj.get("title"),
            "position": obj.get("position"),
            "blobId": obj.get("blobId"),
            "dateModified": obj.get("dateModified"),
            "utcDateModified": obj.get("utcDateModified"),
            "utcDateScheduledForErasureSince": obj.get("utcDateScheduledForErasureSince"),
            "contentLength": obj.get("contentLength")
        })
        return _obj


